:mod:`hio.help.ogling`
======================

.. py:module:: hio.help.ogling

.. autoapi-nested-parse::

   hio.help.ogling module

   Provides python stdlib logging module support



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   hio.help.ogling.Ogler



Functions
~~~~~~~~~

.. autoapisummary::

   hio.help.ogling.initOgler
   hio.help.ogling.openOgler



.. function:: initOgler(level=logging.CRITICAL, **kwa)

   Initialize the ogler global instance once
   Usage:
      # At top level of module in project
      # assign ogler as module global instance availabe at modulename.ogler
      ogler = hio.help.ogling.initOgler()

      # module is mypackage.help  then ogler at mypackage.help.ogler

   Critical is most severe to restrict logging by default

   :param force is Boolean True is to force reinit even if global ogler is not None:
   :param level is default logging level:

   This should be called in package .__init__ to insure that global ogler is
   defined by default. Users may then reset level and reopen log file if need be
   before calling ogler.getLoggers()


.. function:: openOgler(cls=None, name='test', temp=True, **kwa)

   Context manager wrapper Ogler instances.
   Defaults to temporary file logs.
   Context 'with' statements call .close on exit of 'with' block

   :param cls is Class instance of subclass instance:
   :param name is str name of ogler instance for filename so can have multiple oglers: at different paths thar each use different log file directories
   :param temp is Boolean: Otherwise open in persistent directory, do not clear on close
   :param True means open in temporary directory: Otherwise open in persistent directory, do not clear on close
   :param clear on close: Otherwise open in persistent directory, do not clear on close

   Usage:

   with openOgler(name="bob") as ogler:
       logger = ogler.getLogger()  ....

   with openOgler(name="eve", cls=SubclassedOgler)


.. class:: Ogler(name='main', level=logging.ERROR, temp=False, prefix=None, headDirPath=None, reopen=False, clear=False)


   Olgery instances retreive and configure loggers from global logging facility
   Only need one Ogler per application

   Uses python stdlib logging module, logging.getLogger(name).
   Multiple calls to .getLogger() with the same name
   will always return a reference to the same Logger object.

   .. attribute:: .name is str used in file name

      

   .. attribute:: .level is logging severity level

      

   .. attribute:: .temp is Boolean True means use /tmp directory

      

   .. attribute:: .prefix is str used as part of path prefix and formating

      

   .. attribute:: .headDirPath is str used as head of path

      

   .. attribute:: .tailDirpath is str used as tail of path

      

   .. attribute:: .altTailDirPath is str used a alternate tail of path

      

   .. attribute:: .dirPath is full directory path

      

   .. attribute:: .path is full file path

      

   .. attribute:: .opened is Boolean, True means file is opened Otherwise False

      

   .. attribute:: Prefix
      :annotation: = hio

      

   .. attribute:: HeadDirPath
      :annotation: = /usr/local/var

      

   .. attribute:: TailDirPath
      :annotation: = logs

      

   .. attribute:: AltHeadDirPath
      :annotation: = ~

      

   .. attribute:: TempHeadDir
      :annotation: = /tmp

      

   .. attribute:: TempPrefix
      :annotation: = test_

      

   .. attribute:: TempSuffix
      :annotation: = _temp

      

   .. method:: reopen(self, name=None, temp=None, headDirPath=None, clear=False)

      Use or Create if not preexistent, directory path for file .path
      First closes .path if already opened. If clear is True then also clears
      .path before reopening

      :param name is optional name:
                                    if None or unchanged then ignore otherwise recreate path
                                        When recreating path, If not provided use .name
      :param temp is optional boolean:
                                       If None ignore Otherwise
                                           Assign to .temp
                                           If True then open temporary directory,
                                           If False then open persistent directory
      :param headDirPath is optional str head directory pathname of main database:
                                                                                   if None or unchanged then ignore otherwise recreate path
                                                                                      When recreating path, If not provided use default .HeadDirpath
      :param clear is Boolean True means clear .path when closing:


   .. method:: close(self, clear=False)

      Close lmdb at .env and if clear or self.temp then remove directory at .path
      :param clear is boolean:
      :param True means clear directory:


   .. method:: clearDirPath(self)

      Remove logfile directory at .dirPath


   .. method:: resetLevel(self, name=__name__, level=None, globally=False)

      Resets the level of preexisting loggers to level. If level is None then
      use .level


   .. method:: getLogger(self, name=__name__, level=None)

      Returns Basic Logger
      default is to name logger after module



